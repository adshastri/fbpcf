name: Publish Docker image

on:
  push:
    branches: [ main ]

env:
  DISTRO: ubuntu
  REGISTRY: ghcr.io
  LOCAL_IMAGE_NAME: ${{ github.event.repository.name }}/ubuntu
  REGISTRY_IMAGE_NAME: ghcr.io/${{ github.repository }}/ubuntu

jobs:
  # Push image to GitHub Packages.
  push:
    runs-on: [self-hosted, e2e_test_runner]
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v2

      - name: Build fbpcf docker image
        run: |
          ./build-docker.sh -u

      - name: Sanity check fbpcf library (only tests v1 functionality)
        timeout-minutes: 3
        run: |
          ./run-millionaire-sample.sh -u

      - name: Create version string
        id: create_version
        uses: paulhatch/semantic-version@v4.0.2
        with:
          tag_prefix: "v"
          major_pattern: "((MAJOR))"
          minor_pattern: "((MINOR))"
          format: "${major}.${minor}.${patch}-pre${increment}"

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set output
        id: vars
        run: echo ::set-output name=ref::${GITHUB_REF##*/}

      - name: Tag Docker image
        run: |
          docker tag ${{ env.LOCAL_IMAGE_NAME }} ${{ env.REGISTRY_IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.LOCAL_IMAGE_NAME }} ${{ env.REGISTRY_IMAGE_NAME }}:${{ steps.vars.outputs.ref }}
          docker tag ${{ env.LOCAL_IMAGE_NAME }} ${{ env.REGISTRY_IMAGE_NAME }}:${{ steps.create_version.outputs.version_tag }}
          docker tag ${{ env.LOCAL_IMAGE_NAME }} ${{ env.REGISTRY_IMAGE_NAME }}:latest

      - name: Push Docker image
        run: |
          docker push --all-tags ${{ env.REGISTRY_IMAGE_NAME }}

      - name: Create release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          prerelease: false
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: ${{ steps.create_version.outputs.version_tag }}

      - name: Cleanup
        run: |
          # remove all images
          docker image prune -af

          # stop and remove all containers
          docker kill $(docker ps -q) || echo "No running containers to stop."
          docker rm $(docker ps -a -q) || echo "No containers to delete."
